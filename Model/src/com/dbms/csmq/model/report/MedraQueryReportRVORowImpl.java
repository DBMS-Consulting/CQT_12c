package com.dbms.csmq.model.report;

import oracle.jbo.domain.Date;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri May 04 02:13:24 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MedraQueryReportRVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        DictContentCode {
            protected Object get(MedraQueryReportRVORowImpl obj) {
                return obj.getDictContentCode();
            }

            protected void put(MedraQueryReportRVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Term {
            protected Object get(MedraQueryReportRVORowImpl obj) {
                return obj.getTerm();
            }

            protected void put(MedraQueryReportRVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TransactionDate {
            protected Object get(MedraQueryReportRVORowImpl obj) {
                return obj.getTransactionDate();
            }

            protected void put(MedraQueryReportRVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Description {
            protected Object get(MedraQueryReportRVORowImpl obj) {
                return obj.getDescription();
            }

            protected void put(MedraQueryReportRVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ApprovalReason {
            protected Object get(MedraQueryReportRVORowImpl obj) {
                return obj.getApprovalReason();
            }

            protected void put(MedraQueryReportRVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Extension {
            protected Object get(MedraQueryReportRVORowImpl obj) {
                return obj.getExtension();
            }

            protected void put(MedraQueryReportRVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected abstract Object get(MedraQueryReportRVORowImpl object);

        protected abstract void put(MedraQueryReportRVORowImpl object, Object value);

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int DICTCONTENTCODE = AttributesEnum.DictContentCode.index();
    public static final int TERM = AttributesEnum.Term.index();
    public static final int TRANSACTIONDATE = AttributesEnum.TransactionDate.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int APPROVALREASON = AttributesEnum.ApprovalReason.index();
    public static final int EXTENSION = AttributesEnum.Extension.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MedraQueryReportRVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute DictContentCode.
     * @return the DictContentCode
     */
    public String getDictContentCode() {
        return (String) getAttributeInternal(DICTCONTENTCODE);
    }

    /**
     * Gets the attribute value for the calculated attribute Term.
     * @return the Term
     */
    public String getTerm() {
        return (String) getAttributeInternal(TERM);
    }

    /**
     * Gets the attribute value for the calculated attribute TransactionDate.
     * @return the TransactionDate
     */
    public Date getTransactionDate() {
        return (Date) getAttributeInternal(TRANSACTIONDATE);
    }

    /**
     * Gets the attribute value for the calculated attribute Description.
     * @return the Description
     */
    public String getDescription() {
        return (String) getAttributeInternal(DESCRIPTION);
    }

    /**
     * Gets the attribute value for the calculated attribute ApprovalReason.
     * @return the ApprovalReason
     */
    public String getApprovalReason() {
        return (String) getAttributeInternal(APPROVALREASON);
    }

    /**
     * Gets the attribute value for the calculated attribute Extension.
     * @return the Extension
     */
    public String getExtension() {
        return (String) getAttributeInternal(EXTENSION);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

