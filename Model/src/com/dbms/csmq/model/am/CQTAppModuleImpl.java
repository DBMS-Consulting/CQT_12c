package com.dbms.csmq.model.am;

import com.dbms.csmq.model.am.common.CQTAppModule;
import com.dbms.csmq.model.constants.ModelConstants;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.SQLException;

import java.sql.Types;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.HashMap;

import java.util.Hashtable;

import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jdbc.OracleCallableStatement;

import oracle.sql.ARRAY;
import oracle.sql.ArrayDescriptor;

import org.apache.log4j.Logger;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Dec 22 12:42:31 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------

/**
 * @param groupName
 * @return
 * @param dictContentID
 * @param transEndDate
 */
public class CQTAppModuleImpl extends ApplicationModuleImpl implements CQTAppModule {
    public static final Logger logger = Logger.getLogger(CQTAppModuleImpl.class);
    /**
     * This is the default constructor (do not remove).
     */
    public CQTAppModuleImpl() {
    }
    
    public void initBindingContext(){
        
    }

    /**
     * @param dictContentID
     * @param mQCode
     * @param draftRelGroup
     * @param status
     * @param userRole
     * @param userName
     * @return
     */
    public String activate (String dictContentID, String mQCode, String draftRelGroup, String status, String userRole, String userName) {
        
       /*  
      NMAT_UI_PKG.reactivate_retire_nmq (
                    pContent_code     IN tms_dict_contents.dict_content_code%TYPE,
                    pActivation_Group IN tms.tms_predict_groups.name%TYPE,
                    pStatus           IN tms_dict_contents.status%TYPE,
                    pUserRole         IN VARCHAR2,
                    pUserName         IN nmq_track_state.created_user%TYPE)

         */
        logger.info("ACTIVATING: " + mQCode);
        String sql = "{call NMAT_UI_pkg.reactivate_retire_nmq(?,?,?,?,?,?)}";
        DBTransaction dBTransaction = getDBTransaction();
        OracleCallableStatement cstmt = cstmt = (OracleCallableStatement) dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT);
        String retVal = "";
        try {
            cstmt.setString("pContent_ID", dictContentID);
            cstmt.setString("pContent_code", mQCode);
            cstmt.setString("pActivation_Group", draftRelGroup);
            cstmt.setString("pStatus", status);
            cstmt.setString("pUserRole", userRole);
            cstmt.setString("pUserName", userName);
            cstmt.executeUpdate();
            cstmt.close();
            retVal = ModelConstants.SUCCESS;
        } catch (SQLException e) {
            if (e.getMessage().indexOf(ModelConstants.INVALID_PROMOTION_ERROR) > -1) {
                retVal = ModelConstants.INVALID_PROMOTION_ERROR;
            } else {
                e.printStackTrace();
            }
            logger.error("Exception in activate", e);
            retVal = ModelConstants.FAILURE;
        } finally {
            if (null != cstmt){
                try {
                    cstmt.close();
                } catch (SQLException sqe){
                    logger.error("error while closing callable statment...");     
                }
            }
        }

        return retVal;
    }

    /**
     * @param dictContentID
     * @param predictGroupName
     * @return
     */
    public boolean delete (String dictContentID, String predictGroupName){

       /*  
       PROCEDURE cleanup_predict
           (pPredictConID             IN tms.tms_predict_contents.predict_content_id%TYPE,
           pPredictGroupName           IN tms.tms_predict_groups.name%TYPE,
           pDelRelatOrConfirmPageInd  IN VARCHAR2,
           pNotesDeleteInd            IN VARCHAR2)

        pDelRelatOrConfirmPageInd: pass ‘C’ for Confirm page, ‘R’ for Relation Page
        
         */
        boolean retVal = false;
        
        logger.info("DELETING: " + dictContentID + " FROM : " + predictGroupName); 
        String sql = "{call NMAT_UI_pkg.cleanup_predict(?,?,?,?)}";
        DBTransaction dBTransaction = getDBTransaction();
        OracleCallableStatement cstmt = cstmt = (OracleCallableStatement) dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT);

        try {
            cstmt.setString("pPredictConID", dictContentID);
            cstmt.setString("pPredictGroupName", predictGroupName);
            cstmt.setString("pDelRelatOrConfirmPageInd", "C");  // the UI only ever calls this from the confirm page
            cstmt.setString("pNotesDeleteInd", ModelConstants.YES);
            
            cstmt.executeUpdate();
            cstmt.close();
            retVal = true;
        }catch (SQLException e) {
            logger.error("Exception in delete", e); 
            e.printStackTrace();
            retVal = false;
        } finally {
            if (null != cstmt){
                try {
                    cstmt.close();
                } catch (SQLException sqe){
                    logger.error("error while closing callable statment...");     
                }
            }
        }
        return retVal;
    }
    public String retire (String dictContentID, String mQCode, String defDraftRelGroup, String userRole, String userName) {
        
       /*  
       NMAT_UI_PKG.reactivate_retire_nmq (
                    pContent_code     IN tms_dict_contents.dict_content_code%TYPE,
                    pActivation_Group IN tms.tms_predict_groups.name%TYPE,
                    pStatus           IN tms_dict_contents.status%TYPE,
                    pUserRole         IN VARCHAR2,
                    pUserName         IN nmq_track_state.created_user%TYPE)

         */
        logger.info(" *** RETIRING: " + mQCode);
        logger.info("defDraftRelGroup==" + defDraftRelGroup);
        String sql = "{call NMAT_UI_pkg.reactivate_retire_nmq(?,?,?,?,?,?)}";
        DBTransaction dBTransaction = getDBTransaction();
        OracleCallableStatement cstmt = cstmt = (OracleCallableStatement) dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT);
//        FacesMessage msg;
//        CallableStatement cstmt = new CallableStatement (dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT), "NMAT_UI_pkg.reactivate_retire_nmq");
        String retVal = "";
        try {
            cstmt.setString("pContent_ID", dictContentID);
            cstmt.setString("pContent_code", mQCode);
            cstmt.setString("pActivation_Group", defDraftRelGroup);
            cstmt.setString("pStatus", ModelConstants.INACTIVE_ACTIVITY_STATUS);
            cstmt.setString("pUserRole", userRole);
            cstmt.setString("pUserName", userName);
            cstmt.executeUpdate();
            cstmt.close();
            
            //msg = new FacesMessage(FacesMessage.SEVERITY_INFO, "MedDRA Query Retired Successfully", null);
            retVal = ModelConstants.SUCCESS;
        } catch (SQLException e) {
            if (e.getMessage().indexOf(ModelConstants.INVALID_PROMOTION_ERROR) > -1) {  
                //String messageText = CSMQBean.getProperty("DELETE_DURING_IMPACT_ANALYSYS");
                retVal = ModelConstants.INVALID_PROMOTION_ERROR;
//                msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, messageText, "");
            } else {
                    retVal = ModelConstants.FAILURE;
    //                e.printStackTrace();
    //                msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Unable to Retire " + CSMQBean.customMQName, e.getMessage());
            }
            logger.error("Exception in retire", e);
            
        } finally {
            if (null != cstmt){
                try {
                    cstmt.close();
                } catch (SQLException sqe){
                    logger.error("error while closing callable statment...");     
                }
            }
        }
        return retVal;
    }
    /**
     * @param shortName
     * @return
     */
    public void setCurrentFilterDictionary (String shortName)   {
       String sql = "{call smq_codelist_pkg.set_database_customizations (?)}";
       DBTransaction dBTransaction = getDBTransaction();
       OracleCallableStatement cstmt = (OracleCallableStatement) dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT);
       try {
           cstmt.setString(1, shortName);
           cstmt.executeUpdate();
           cstmt.close();
        } catch ( Exception e) {
           logger.error("Exception in setCurrentFilterDictionary", e);
           e.printStackTrace();
        } finally {
            if (null != cstmt){
                try {
                    cstmt.close();
                } catch (SQLException sqe){
                    logger.error("error while closing callable statment...");     
                }
            }
        }
    }

    /**
     * @param dictContentIDs
     * @param state
     * @param currentUser
     * @param currentUserRole
     * @param dueDate
     * @param comment
     * @param activationGroup
     * @return
     */
    public HashMap changeState (String dictContentIDs, String state, String currentUser, String currentUserRole, oracle.jbo.domain.Date dueDate, String comment, String activationGroup) {
        
       /*
        PROCEDURE workflow_pkg.change_state_of_nmq (
          i_dict_content_id IN tms_predict_contents.predict_content_id%TYPE,
          i_new_state       IN nmq_track_state.state%TYPE,
          i_user_id         IN nmq_track_state.created_user%TYPE,
          i_due_date        IN nmq_track_state.due_date_ts%TYPE,
          i_comment         IN nmq_track_state.description%TYPE,
          i_group_name      IN tms.tms_predict_groups.name%TYPE)
          o_new_state        OUT nmq_track_state.state%TYPE,
          o_approval_reason  OUT nmq_track_state.description%TYPE);
          
        */
        
        logger.info("*** CHANGING STATE ***");
        logger.info("i_dict_content_id: " + dictContentIDs);
        logger.info("i_new_state: " + state); 
        logger.info("i_user_id: " + currentUser);
        logger.info("i_due_date: " + dueDate);
        logger.info("i_comment: " + comment);
        logger.info("i_group_name: " + activationGroup);
        
        String sql = "{call workflow_pkg.change_state_of_nmq(?,?,?,?,?,?,?,?,?,?)}";
        DBTransaction dBTransaction = getDBTransaction();
        //FacesMessage msg;
        OracleCallableStatement cstmt = (OracleCallableStatement) dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT);
        HashMap retVal = new HashMap();  // array to return the new state and message
        
        try {
            cstmt.setString("i_dict_content_id", dictContentIDs);
            cstmt.setString("i_new_state", state);
            cstmt.setString("i_user_id", currentUser);
            cstmt.setString("i_role_name", currentUserRole); 
            
            if (dueDate == null) 
                cstmt.setNull("i_due_date", Types.DATE);
            else
                cstmt.setDate("i_due_date",  dueDate.dateValue());
            
            cstmt.setString("i_comment", comment);
            cstmt.setString("i_group_name", activationGroup);
            cstmt.setNull("i_transaction_date", Types.DATE);
            
            cstmt.setString("o_new_state", "");
            cstmt.registerOutParameter("o_new_state", Types.NVARCHAR);
            
            cstmt.setString("o_approval_reason", "");
            cstmt.registerOutParameter("o_approval_reason", Types.NVARCHAR);
            
            cstmt.executeUpdate();
            
            String tempState = cstmt.getString("o_new_state");
            String tempReason = cstmt.getString("o_approval_reason");
            
            if (tempState != null)
                retVal.put("STATE", tempState);
            if (tempReason != null)
            retVal.put("REASON",tempReason);
                retVal.put("RETURN_CODE",ModelConstants.SUCCESS);
            cstmt.close();
                
            //msg = new FacesMessage(FacesMessage.SEVERITY_INFO, "MedDRA Query State Changed Successfully to " + state, null);
        } catch (SQLException e) {
            if (e.getMessage().indexOf(ModelConstants.INVALID_PROMOTION_ERROR) > -1) {
                    retVal.put("RETURN_CODE",ModelConstants.INVALID_PROMOTION_ERROR);
            } else if (e.getMessage().indexOf(ModelConstants.INVALID_PROMOTION_SEQUENCE_ERROR) > -1) {
                    retVal.put("RETURN_CODE",ModelConstants.INVALID_PROMOTION_SEQUENCE_ERROR);
            } else if (e.getMessage().indexOf(ModelConstants.PROMOTION_DEPENDENCY_ERROR) > -1) {
                    retVal.put("RETURN_CODE",ModelConstants.PROMOTION_DEPENDENCY_ERROR);
            } else if (e.getMessage().indexOf(ModelConstants.INVALID_STATE_CHANGE_ERROR) > -1) {
                    retVal.put("RETURN_CODE",ModelConstants.INVALID_STATE_CHANGE_ERROR);
            } else if (e.getMessage().indexOf(ModelConstants.MUST_BE_NMQ_OR_SMQ_ERROR) > -1) {
                    retVal.put("RETURN_CODE",ModelConstants.MUST_BE_NMQ_OR_SMQ_ERROR);
            } else if (e.getMessage().indexOf(ModelConstants.GENERIC_ACTIVATION_ERROR) > -1) {
                    retVal.put("RETURN_CODE",ModelConstants.GENERIC_ACTIVATION_ERROR);
            } else if (e.getMessage().indexOf(ModelConstants.DATABASE_CONFIGURATION_ERROR) > -1) {
                    retVal.put("RETURN_CODE",ModelConstants.DATABASE_CONFIGURATION_ERROR);
            } else if (e.getMessage().indexOf(ModelConstants.INVALID_STATE_CHANGE_FROM_PENDING_TO_DRAFT_ERROR) > -1) {
                    retVal.put("RETURN_CODE",ModelConstants.INVALID_STATE_CHANGE_FROM_PENDING_TO_DRAFT_ERROR);
            } else { // it's something else
                    retVal.put("RETURN_CODE",ModelConstants.FAILURE);
            }
            logger.error("Exception in changeState", e);
        } finally {
            if (null != cstmt){
                try {
                    cstmt.close();
                } catch (SQLException sqe){
                    logger.error("error while closing callable statment...");     
                }
            }
        }
        return retVal;
    }

    /**
     * @param dictContentIDs
     * @param state
     * @param currentUser
     * @param currentUserRole
     * @param dueDate
     * @param comment
     * @param activationGroup
     * @return
     */
    public HashMap<String, String> changeStateFromDraftToPublish (String dictContentIDs, String state, String currentUser, String currentUserRole, oracle.jbo.domain.Date dueDate, String comment, String activationGroup) {
        
       /*
       PROCEDURE workflow_pkg.change_state_draft_to_publish (
                 i_dict_content_id IN tms_predict_contents.predict_content_id%TYPE,
                 i_new_state       IN nmq_track_state.state%TYPE,
                 i_user_id         IN nmq_track_state.created_user%TYPE,
                 i_role_name        IN user_role_privs.granted_role%TYPE,
                 i_due_date        IN nmq_track_state.due_date_ts%TYPE,
                 i_comment         IN nmq_track_state.description%TYPE,
                 i_group_name      IN tms.tms_predict_groups.name%TYPE,
                 o_new_state        OUT nmq_track_state.state%TYPE,
                 o_approval_reason  OUT nmq_track_state.description%TYPE)

          
        */
        
        state = "Published";
        
        logger.info("*** CHANGING STATE FROM DRAFT TO PUBLISH ***");
        logger.info("i_dict_content_id: " + dictContentIDs);
        logger.info("i_new_state: " + state); 
        logger.info("i_user_id: " + currentUser);
        logger.info("i_due_date: " + dueDate);
        logger.info("i_comment: " + comment);
        logger.info("i_group_name: " + activationGroup);
        
        
        String sql = "{call workflow_pkg.change_state_draft_to_publish(?,?,?,?,?,?,?,?,?)}";
        DBTransaction dBTransaction = getDBTransaction();
//        FacesMessage msg;
//        CallableStatement cstmt = new CallableStatement (dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT), "workflow_pkg.change_state_draft_to_publish");
//        String messageText;
        HashMap <String, String> retVal= new HashMap<String, String>();  // array to return the new state and message
        OracleCallableStatement cstmt = (OracleCallableStatement) dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT);
        try {
            cstmt.setString("i_dict_content_id", dictContentIDs);
            cstmt.setString("i_new_state", state);
            cstmt.setString("i_user_id", currentUser);
            cstmt.setString("i_role_name", currentUserRole); 
            
            if (dueDate == null) {
                cstmt.setNull("i_due_date", Types.DATE);
            } else {
                cstmt.setDate("i_due_date",  dueDate.dateValue());
            }
            cstmt.setString("i_comment", comment);
            cstmt.setString("i_group_name", activationGroup);
            //cstmt.setNull("i_transaction_date", Types.DATE);
            
            cstmt.setString("o_new_state", "");
            cstmt.registerOutParameter("o_new_state", Types.NVARCHAR);
            
            cstmt.setString("o_approval_reason", "");
            cstmt.registerOutParameter("o_approval_reason", Types.NVARCHAR);
            
            cstmt.executeUpdate();
            
            String tempState = cstmt.getString("o_new_state");
            String tempReason = cstmt.getString("o_approval_reason");
            
            if (tempState != null)
                retVal.put("STATE", tempState);
            if (tempReason != null)
            retVal.put("REASON",tempReason);
            cstmt.close();
            retVal.put("RETURN_CODE",ModelConstants.SUCCESS);
           // msg = new FacesMessage(FacesMessage.SEVERITY_INFO, "MedDRA Query State Changed Successfully to " + state, null);
        } catch (SQLException e) {
            //e.printStackTrace();
            
            if (e.getMessage().indexOf(ModelConstants.INVALID_PROMOTION_ERROR) > -1) {  
             //   messageText = CSMQBean.getProperty("INVALID_PROMOTION_ERROR");
                retVal.put("RETURN_CODE",ModelConstants.INVALID_PROMOTION_ERROR);
            } else if (e.getMessage().indexOf(ModelConstants.INVALID_PROMOTION_SEQUENCE_ERROR) > -1) {
                    retVal.put("RETURN_CODE",ModelConstants.INVALID_PROMOTION_SEQUENCE_ERROR);
             //   messageText = CSMQBean.getProperty("INVALID_PROMOTION_SEQUENCE_ERROR");
            } else if (e.getMessage().indexOf(ModelConstants.PROMOTION_DEPENDENCY_ERROR) > -1) {
                    retVal.put("RETURN_CODE",ModelConstants.PROMOTION_DEPENDENCY_ERROR);
             //   messageText = CSMQBean.getProperty("PROMOTION_DEPENDENCY_ERROR");
            } else if (e.getMessage().indexOf(ModelConstants.INVALID_STATE_CHANGE_ERROR) > -1) {
                    retVal.put("RETURN_CODE",ModelConstants.INVALID_STATE_CHANGE_ERROR);
            //    messageText =  e.getMessage(); //CSMQBean.getProperty("INVALID_STATE_CHANGE_ERROR");
            } else if (e.getMessage().indexOf(ModelConstants.MUST_BE_NMQ_OR_SMQ_ERROR) > -1) {
                    retVal.put("RETURN_CODE",ModelConstants.MUST_BE_NMQ_OR_SMQ_ERROR);
               // messageText = CSMQBean.getProperty("MUST_BE_NMQ_OR_SMQ_ERROR");
            } else if (e.getMessage().indexOf(ModelConstants.GENERIC_ACTIVATION_ERROR) > -1) {
                    retVal.put("RETURN_CODE",ModelConstants.GENERIC_ACTIVATION_ERROR);
                //messageText = CSMQBean.getProperty("GENERIC_ACTIVATION_ERROR") + "DETAILS: " + e.getMessage();
            } else if (e.getMessage().indexOf(ModelConstants.DATABASE_CONFIGURATION_ERROR) > -1) {
                    retVal.put("RETURN_CODE",ModelConstants.DATABASE_CONFIGURATION_ERROR);
               // messageText = CSMQBean.getProperty("DATABASE_CONFIGURATION_ERROR");
            } else if (e.getMessage().indexOf(ModelConstants.INVALID_STATE_CHANGE_FROM_PENDING_TO_DRAFT_ERROR) > -1) {
                    retVal.put("RETURN_CODE",ModelConstants.INVALID_STATE_CHANGE_FROM_PENDING_TO_DRAFT_ERROR);
              //  messageText = CSMQBean.getProperty("INVALID_STATE_CHANGE_FROM_PENDING_TO_DRAFT_ERROR");
            } else { // it's something else
              //  messageText = "The following error occurred: " +  e.getMessage() ;
              retVal.put("RETURN_CODE",ModelConstants.FAILURE);
//                e.printStackTrace();
            }
//            msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, messageText, "");
//            FacesContext.getCurrentInstance().addMessage(null, msg);
            return retVal;
        } finally {
            if (null != cstmt){
                try {
                    cstmt.close();
                } catch (SQLException sqe){
                    logger.error("error while closing callable statment...");     
                }
            }
        }
       // FacesContext.getCurrentInstance().addMessage(null, msg);
        return retVal;
    }


    /**
     * @param dictContentIDs
     * @param currentUser
     * @param currentUserRole
     * @return
     */
    public HashMap<String, String> setDefaultIAState (String dictContentIDs, String currentUser, String currentUserRole) {
        
       /*
       PROCEDURE default_state_to_pending_ia (
         i_dict_content_id  IN VARCHAR2,
         i_nmq_smq          IN VARCHAR2,
         i_new_state        IN nmq_track_state.state%TYPE := g_state_pending,
         i_user_id          IN nmq_track_state.created_user%TYPE,
         i_role_name        IN user_role_privs.granted_role%TYPE,
         i_due_date         IN nmq_track_state.due_date_ts%TYPE := NULL,
         i_comment          IN nmq_track_state.description%TYPE := NULL,
         i_group_name       IN tms.tms_predict_groups.NAME%TYPE := NULL,
         i_transaction_date IN nmq_track_state.creation_ts%TYPE := NULL,
         o_new_state        OUT nmq_track_state.state%TYPE,
         o_approval_reason  OUT nmq_track_state.description%TYPE);


       PROCEDURE change_state_of_nmq (
         i_dict_content_id  IN VARCHAR2,
         i_new_state        IN nmq_track_state.state%TYPE,
         i_user_id          IN nmq_track_state.created_user%TYPE,
         i_role_name        IN user_role_privs.granted_role%TYPE,
         i_due_date         IN nmq_track_state.due_date_ts%TYPE,
         i_comment          IN nmq_track_state.description%TYPE,
         i_group_name       IN tms.tms_predict_groups.NAME%TYPE,
         i_transaction_date IN nmq_track_state.creation_ts%TYPE := NULL,
         o_new_state        OUT nmq_track_state.state%TYPE,
         o_approval_reason  OUT nmq_track_state.description%TYPE) IS
        */
        
        logger.info("*** CHANGING STATE ***");
        logger.info("i_dict_content_id: " + dictContentIDs);
       // CSMQBean.logger.info("i_nmq_smq: " + nmqSmq); 
        logger.info("i_user_id: " + currentUser);
        logger.info("i_role_name: " + currentUserRole);
        logger.info("i_new_state: " + ModelConstants.STATE_PENDING_IMPACT_ASSESSMENT);
        
       // String sql = "{call workflow_pkg.default_state_to_pending_ia(?,?,?,?,?,?,?,?,?,?,?)}";
        String sql = "{call workflow_pkg.change_state_of_nmq(?,?,?,?,?,?,?,?,?,?)}";
        DBTransaction dBTransaction = getDBTransaction();
//        FacesMessage msg;
//        CallableStatement cstmt = new CallableStatement (dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT), "workflow_pkg.change_state_of_nmq");
//        String messageText;
        HashMap<String, String> retVal = new HashMap<String, String>();  // array to return the new state and message
        OracleCallableStatement cstmt = (OracleCallableStatement) dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT);
        try {
            cstmt.setString("i_dict_content_id", dictContentIDs);
           // cstmt.setString("i_nmq_smq", nmqSmq);
            cstmt.setString("i_user_id", currentUser);
            cstmt.setString("i_role_name", currentUserRole);
            cstmt.setString("i_new_state", ModelConstants.STATE_PENDING_IMPACT_ASSESSMENT);
           // cstmt.setNull("i_new_state", Types.VARCHAR);
            cstmt.setNull("i_due_date", Types.DATE);
            cstmt.setString("i_comment", "Updated via NMAT UI DML");
            cstmt.setNull("i_group_name", Types.VARCHAR);
            cstmt.setNull("i_transaction_date", Types.DATE);
            
            cstmt.setString("o_new_state", "");
            cstmt.registerOutParameter("o_new_state", Types.VARCHAR);
            
            cstmt.setString("o_approval_reason", "");
            cstmt.registerOutParameter("o_approval_reason", Types.VARCHAR);
            
            cstmt.executeUpdate();
            
            String tempState = cstmt.getString("o_new_state");
            String tempReason = cstmt.getString("o_approval_reason");
            
            if (tempState != null)
                retVal.put("STATE", tempState);
            if (tempReason != null){
                retVal.put("REASON",tempReason);
            }
            retVal.put("RETURN_CODE",ModelConstants.SUCCESS);
            cstmt.close();
            return retVal;
        }  catch (SQLException e) {
            logger.error("Exception in setDefaultIAState", e);
            retVal.put("RETURN_CODE",ModelConstants.FAILURE);
            return retVal;
        } finally {
            if (null != cstmt){
                try {
                    cstmt.close();
                } catch (SQLException sqe){
                    logger.error("error while closing callable statment...");     
                }
            }
        }
        
    }
    /*
     * @author MTW
     * 06/30/2014
     * @fsds NMAT-UC01.02 & NMAT-UC11.02
     * add String currentDesignee
     */

    /**
     * @param currentFilterDictionaryShortName
     * @param currentPredictGroups
     * @param tempName
     * @param currentProduct
     * @param currentTermLevel
     * @param currentScope
     * @param currentMQALGO
     * @param currentMQCRTEV
     * @param currentMQGROUP
     * @param currentContentCode
     * @param updateParam
     * @param currentRequestor
     * @param currentDictContentID
     * @param userRole
     * @param currentPendingStatus
     * @param currentDesignee
     * @return
     */
    public HashMap saveDetails (String currentFilterDictionaryShortName, String currentPredictGroups, String tempName, 
                                         String currentProduct, String currentTermLevel, String currentScope, String currentMQALGO, 
                                         String currentMQCRTEV, String currentMQGROUP, String currentContentCode, String updateParam, 
                                         String currentRequestor, String currentDictContentID, String userRole,String currentPendingStatus, String currentDesignee) {
        
       // CALL PROC TO SAVE
        /*
        PROCEDURE nmat_ui_pkg.load_content (
            psmq_dct_nm         IN tms.tms_def_dictionaries.short_name%TYPE,
            psmq_grp_nm         IN tms.tms_predict_groups.name%TYPE,
            pmq_name            IN tms.tms_predict_contents.term%TYPE,
            pmq_product         IN tms.tms_predict_contents.value_3%TYPE,
            pmq_level           IN tms.tms_def_levels.name%TYPE,
            pmq_scp             IN tms.tms_predict_contents.category%TYPE,
            pmq_algo            IN tms.tms_predict_contents.value_1%TYPE,
            pmq_crtev           IN tms.tms_predict_contents.value_4%TYPE,
            pmq_group           IN tms.tms_predict_contents.value_2%TYPE,
            pmqcd               IN tms.tms_predict_contents.dict_content_code%TYPE,
            pstatus             IN tms.tms_predict_contents.status%TYPE, --I, U
            pUserName           IN tms.tms_predict_contents.created_by%TYPE,
            pContentID          IN tms.tms_predict_contents.predict_content_id%TYPE,
            pUserRole           IN  VARCHAR2,
            pCurrPendStatus     IN  VARCHAR2,
            o_dict_content_id   OUT tms_predict_contents.predict_content_id%TYPE,
            o_dict_content_code OUT tms_predict_contents.dict_content_code%TYPE,
            o_Create_date       OUT tms_predict_contents.dict_content_entry_ts%TYPE
            )
        */

        String sql = "{call nmat_ui_pkg.load_content(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
        DBTransaction dBTransaction = getDBTransaction();
        String newDictContentID = "";
        String newDictContentCode = "";
        oracle.jbo.domain.Date currentDateRequested = null;
        HashMap retVal = new HashMap();  // array to return the new state and message
        
        OracleCallableStatement cstmt = (OracleCallableStatement) dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT);

        try {
            cstmt.setString("psmq_dct_nm", currentFilterDictionaryShortName);
            cstmt.setString("psmq_grp_nm", currentPredictGroups);
            cstmt.setString("pmq_name", tempName);
            cstmt.setString("pmq_product", currentProduct);
            cstmt.setString("pmq_level", currentTermLevel);
            cstmt.setString("pmq_scp", currentScope);
            cstmt.setString("pmq_algo", currentMQALGO);
            cstmt.setString("pmq_crtev", currentMQCRTEV);
            cstmt.setString("pmq_group", currentMQGROUP);
            cstmt.setString("pmqcd", currentContentCode);
            cstmt.setString("pstatus", updateParam);
            cstmt.setString("pUserName", currentRequestor);
            cstmt.setString("pContentID", currentDictContentID);
            cstmt.setString("pUserRole", userRole);
            cstmt.setString("pCurrPendStatus", currentPendingStatus);
            cstmt.setString("o_dict_content_id", "");
            cstmt.registerOutParameter("o_dict_content_id", Types.NVARCHAR);
            cstmt.setString("o_dict_content_code", "");
            cstmt.registerOutParameter("o_dict_content_code", Types.NVARCHAR);
            cstmt.setString("o_Create_date", "");
            cstmt.registerOutParameter("o_Create_date", Types.NVARCHAR);
            
            /*
             * @author MTW
             * 07/22/2014
             */
            //saveDesignee(currentDictContentID, currentDesignee);
            /*
             * TES TEMP CHANGE TO CALL FUNCTION BELOW
             * 
             */
            
            
            cstmt.executeUpdate();
            newDictContentID = cstmt.getString("o_dict_content_id");
            newDictContentCode = cstmt.getString("o_dict_content_code");
            String tempDate = cstmt.getString("o_Create_date");
    
            updateMQDesignee(newDictContentID, currentDesignee);
    
            //DateFormat formatter = new SimpleDateFormat("dd-MMM-yy");
            String dateFormat = "dd-MMM-yy";
            DateFormat formatter = new SimpleDateFormat(dateFormat);
            java.util.Date date = null;
            //java.util.Date date = formatter.parse(tempDate);
            //20141121-2  fix -Venkat
            try{
                date = formatter.parse(tempDate);
            } catch (java.text.ParseException e){
                dateFormat = "dd-MM-yy";
                formatter = new SimpleDateFormat(dateFormat);
                date = formatter.parse(tempDate);
            }
            java.sql.Date sqlDate = new java.sql.Date(date.getTime());
            currentDateRequested = new oracle.jbo.domain.Date(sqlDate);
            cstmt.close();
            
            if (newDictContentID != null) retVal.put("NEW_DICT_CONTENT_ID", newDictContentID);
            if (newDictContentCode != null) retVal.put("NEW_DICT_CONTENT_CODE", newDictContentCode);
            if (currentDateRequested != null) retVal.put("CURRENT_DATE_REQUESTED", currentDateRequested);
        } catch (SQLException e) {
//            String messageText;
            if (e.getMessage().indexOf(ModelConstants.NAME_IN_USE_ERROR) > -1) {  // it's a name already in use error
                //messageText = "The name: " + tempName + " is already in use.  Please use another name";
                    retVal.put("RETURN_CODE",ModelConstants.NAME_IN_USE_ERROR);
            } else if (e.getMessage().indexOf(ModelConstants.INVALID_STATE_CHANGE_ERROR) > -1) {  // it's a name already in use error
                retVal.put("RETURN_CODE",ModelConstants.INVALID_STATE_CHANGE_ERROR);
             //   messageText = tempName + " is Pending Impact Assessment and must be deleted in Impact Assessment to Update the Current NMQ.";
            } else { // it's something else
                retVal.put("RETURN_CODE",ModelConstants.FAILURE);
               // messageText = "The following error occurred.  " + tempName + " was not " + action + " successfully.\n" + e.getMessage() ;
                e.printStackTrace();
            }
//            FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, messageText, "");
//            FacesContext.getCurrentInstance().addMessage(null, msg);
//            return null;
            logger.error("Exception in Save Details", e);
        } catch (ParseException e) {
            logger.error("ParseException in Save Details",e);
        } finally {
            if (null != cstmt){
                try {
                    cstmt.close();
                } catch (SQLException sqe){
                    logger.error("error while closing callable statment...");     
                }
            }
        }
        return retVal;
    }

    /**
     * @param dictContentID
     * @param designee
     * @return
     */
    public boolean updateMQDesignee (String dictContentID, String designee) {
        /*
        PROCEDURE nmat_ui_pkg.s_insert_update_designee
                   (pPredictConID             IN tms.tms_predict_contents.predict_content_id%TYPE,
                   pDesignee           IN track_designee.designee%TYPE)
        */
        
        String sql = "{call nmat_ui_pkg.s_insert_update_designee(?,?)}";
        DBTransaction dBTransaction = getDBTransaction();
        OracleCallableStatement cstmt = (OracleCallableStatement) dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT);
        //CallableStatement cstmt = new CallableStatement (dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT), "nmat_ui_pkg.s_insert_update_designee");
        
        try {
            cstmt.setString(1, dictContentID);
            cstmt.setString(2, designee);
            cstmt.executeUpdate(); 
            return true;
        } catch (SQLException e) {
            logger.error("Exception in updateMQDesignee...", e); 
            //e.printStackTrace();
            return false;
        } finally {
            if (null != cstmt){
                try {
                    cstmt.close();
                } catch (SQLException sqe){
                    logger.error("error while closing callable statment...");     
                }
            }
        }
    }
    /**
     * @param dictContentID
     * @param transEndDate
     * @return
     */
    public Date getLastActivationDate(String dictContentID, Date transEndDate) {
        /*
        PROCEDURE nmat_ui_pkg.s_insert_update_designee
                   (pPredictConID             IN tms.tms_predict_contents.predict_content_id%TYPE,
                   pDesignee           IN track_designee.designee%TYPE)
        */
        Date lastActivationDate = null;
        String sql = "{? = call workflow_pkg.last_activation_date(?,?)}";
        DBTransaction dBTransaction = getDBTransaction();
        OracleCallableStatement cstmt = (OracleCallableStatement) dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT);
        //CallableStatement cstmt = new CallableStatement (dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT), "workflow_pkg.last_activation_date");
        
        try {
            cstmt.registerOutParameter(1, Types.DATE);
            cstmt.setString(2, dictContentID);
            cstmt.setDate(3, transEndDate);
            cstmt.execute();
            lastActivationDate = cstmt.getDate(1);
            return lastActivationDate;
        } catch (SQLException e) {
            e.printStackTrace();
            logger.error("Exception in getLastActivationDate...", e);
            return null;
        } finally {
            if (null != cstmt){
                try {
                    cstmt.close();
                } catch (SQLException sqe){
                    logger.error("error while closing callable statment...");     
                }
            }
        }
    }

    /**
     * @param tempName
     * @param currentProduct
     * @param currentTermLevel
     * @param currentScope
     * @param currentMQALGO
     * @param currentMQCRTEV
     * @param currentMQGROUP
     * @param currentContentCode
     * @param updateParam
     * @param currentRequestor
     * @param currentDictContentID
     * @param userRole
     * @param currentDesignee
     * @return
     */
    public HashMap<String, String> saveIADetails (String tempName, String currentProduct, String currentTermLevel, String currentScope, String currentMQALGO, 
                                         String currentMQCRTEV, String currentMQGROUP, String currentContentCode, String updateParam, 
                                         String currentRequestor, String currentDictContentID, String userRole, String currentDesignee) {
        
       // CALL PROC TO SAVE
        /*
       PROCEDURE nmat_ui_pkg.load_content_IA
         (pmq_name            IN tms.tms_predict_contents.term%TYPE,
          pmq_product         IN tms.tms_predict_contents.value_3%TYPE,
          pmq_level           IN tms.tms_def_levels.name%TYPE,
          pmq_scp             IN tms.tms_predict_contents.category%TYPE,
          pmq_algo            IN tms.tms_predict_contents.value_1%TYPE,
          pmq_crtev           IN tms.tms_predict_contents.value_4%TYPE,
          pmq_group           IN tms.tms_predict_contents.value_2%TYPE,
          pmqcd               IN tms.tms_predict_contents.dict_content_code%TYPE,
          pstatus             IN tms.tms_predict_contents.status%TYPE, --I, U
          pUserName           IN tms.tms_predict_contents.created_by%TYPE,
          pContentID          IN tms.tms_predict_contents.predict_content_id%TYPE,
          pUserRole           IN  VARCHAR2, 
          o_dict_content_id   OUT tms_predict_contents.predict_content_id%TYPE,
          o_dict_content_code OUT tms_predict_contents.dict_content_code%TYPE,
          o_Create_date       OUT tms_predict_contents.dict_content_entry_ts%TYPE
         ) ;
        */

        String sql = "{call nmat_ui_pkg.load_content_IA(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
        DBTransaction dBTransaction = getDBTransaction();
        String newDictContentID = "";
        String newDictContentCode = "";
        oracle.jbo.domain.Date currentDateRequested = null;
        HashMap<String, String> retVal = new HashMap<String, String>();  // array to return the new state and message
        OracleCallableStatement cstmt = (OracleCallableStatement) dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT);
        //CallableStatement cstmt = new CallableStatement (dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT), "nmat_ui_pkg.load_content_IA");

        try {
            cstmt.setString("pmq_name", tempName);
            cstmt.setString("pmq_product", currentProduct);
            cstmt.setString("pmq_level", currentTermLevel);
            cstmt.setString("pmq_scp", currentScope);
            cstmt.setString("pmq_algo", currentMQALGO);
            cstmt.setString("pmq_crtev", currentMQCRTEV);
            cstmt.setString("pmq_group", currentMQGROUP);
            cstmt.setString("pmqcd", currentContentCode);
            cstmt.setString("pstatus", updateParam);
            cstmt.setString("pUserName", currentRequestor);
            cstmt.setString("pContentID", currentDictContentID);
            cstmt.setString("pUserRole", userRole);
            cstmt.setString("o_dict_content_id", "");
            cstmt.registerOutParameter("o_dict_content_id", Types.NVARCHAR);
            cstmt.setString("o_dict_content_code", "");
            cstmt.registerOutParameter("o_dict_content_code", Types.NVARCHAR);
            cstmt.setString("o_Create_date", "");
            cstmt.registerOutParameter("o_Create_date", Types.NVARCHAR);
            
            cstmt.executeUpdate();
            newDictContentID = cstmt.getString("o_dict_content_id");
            newDictContentCode = cstmt.getString("o_dict_content_code");
            String tempDate = cstmt.getString("o_Create_date");
            
            updateMQDesignee(newDictContentID, currentDesignee);
            //DateFormat formatter = new SimpleDateFormat("dd-MMM-yy");
            String dateFormat = "dd-MMM-yy";
            DateFormat formatter = new SimpleDateFormat(dateFormat);
            java.util.Date date = null;
            //java.util.Date date = formatter.parse(tempDate);
            //20141121-2  fix -Venkat
            try{
                date = formatter.parse(tempDate);
            } catch (java.text.ParseException e){
                dateFormat = "dd-MM-yy";
                formatter = new SimpleDateFormat(dateFormat);
                date = formatter.parse(tempDate);
            }
            
            java.sql.Date sqlDate = new java.sql.Date(date.getTime());
            currentDateRequested = new oracle.jbo.domain.Date(sqlDate);
            cstmt.close();
            
            if (newDictContentID != null) retVal.put("NEW_DICT_CONTENT_ID", newDictContentID);
            if (newDictContentCode != null) retVal.put("NEW_DICT_CONTENT_CODE", newDictContentCode);
            if (currentDateRequested != null) retVal.put("CURRENT_DATE_REQUESTED", currentDateRequested.toString());
            retVal.put("RETURN_CODE",ModelConstants.SUCCESS);
        } catch (SQLException e) {
            //String messageText;
            if (e.getMessage().indexOf(ModelConstants.NAME_IN_USE_ERROR) > -1 || e.getMessage().indexOf(ModelConstants.NAME_IN_USE_ERROR_NEW) > -1) {  // it's a name already in use error
                retVal.put("RETURN_CODE",ModelConstants.NAME_IN_USE_ERROR);
                //messageText = "The name: " + tempName + " is already in use.  Please use another name";
            } else { // it's something else
                //messageText = "The following error occurred.  " + tempName + " was not " + action + " successfully.\n" + e.getMessage() ;
                retVal.put("RETURN_CODE",ModelConstants.FAILURE);
                //e.printStackTrace();
            }
            logger.error("SQLException in saveIADetails",e);
//            FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, messageText, "");
//            FacesContext.getCurrentInstance().addMessage(null, msg);
//            return null;
        } catch (ParseException e) {
            logger.error(null,e);
        } finally {
            if (null != cstmt){
                try {
                    cstmt.close();
                } catch (SQLException sqe){
                    logger.error("error while closing callable statment...");     
                }
            }
        }
        return retVal;
    }


    /**
     * @param noteName
     * @param content
     * @param currentFilterDictionaryShortName
     * @param currentPredictGroups
     * @param currentDictContentID
     * @param currentTermLevel
     * @param userName
     * @param userRole
     * @param extension
     * @return
     */
    public String saveInfNotes (String noteName, String content, String currentFilterDictionaryShortName, String currentPredictGroups, String currentDictContentID, String currentTermLevel, String userName, String userRole, String extension) {
        /*
        PROCEDURE nmat_ui_pkg.load_notes
             (psmq_dct_nm        IN tms.tms_def_dictionaries.short_name%TYPE,
              psmq_grp_nm        IN tms.tms_predict_groups.name%TYPE,
              pContent_Id        IN tms.tms_predict_contents.predict_content_id%TYPE,
              pmq_level          IN tms.tms_def_levels.name%TYPE,
              pnote_nm           IN tms.tms_def_details.short_name%TYPE, --SMQDESC
              pnote_type         IN tms.tms_def_dict_info_dets.info_note_type%TYPE,--C=Content; R=Relations; D=Dictionary
              pnote_val          IN tms.tms_dict_info_clobs.def_detail_value%TYPE,
              pUserRole          IN VARCHAR2,
              pUserName          IN nmq_track_state.created_user%TYPE,
              pTermType          IN VARCHAR2
              ) ;


        */
        logger.info("SAVING NOTE: " + noteName);

        String sql = "{call nmat_ui_pkg.load_notes (?,?,?,?,?,?,?,?,?,?)}";
        DBTransaction dBTransaction = getDBTransaction();
        OracleCallableStatement cstmt = (OracleCallableStatement) dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT);
       // CallableStatement cstmt = new CallableStatement (dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT), "nmat_ui_pkg.load_notes");
        try {
            cstmt.setString("psmq_dct_nm", currentFilterDictionaryShortName);
            cstmt.setString("psmq_grp_nm", currentPredictGroups);
            cstmt.setString("pContent_Id", currentDictContentID);
            cstmt.setString("pmq_level", currentTermLevel);
            cstmt.setString("pnote_nm", noteName);
            cstmt.setString("pnote_type", "C");
            cstmt.setString("pnote_val", content);
            cstmt.setString("pUserRole", userRole);
            cstmt.setString("pUserName", userName);
            cstmt.setString("pTermType", extension);
            cstmt.executeUpdate();
            cstmt.close();
            return ModelConstants.SUCCESS;
        } catch (SQLException e) {
            //String messageText = "An error occurred.  " + noteName + " was not " + action + " successfully.";
            //FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, messageText, "");
            //FacesContext.getCurrentInstance().addMessage(null, msg);
           // e.printStackTrace();
           logger.error("Exception in saveInfNotes...", e); 
            return ModelConstants.FAILURE;
        } finally {
            if (null != cstmt){
                try {
                    cstmt.close();
                } catch (SQLException sqe){
                    logger.error("error while closing callable statment...");     
                }
            }
        }
        
    }


    /**
     * @param noteName
     * @param content
     * @param currentDictContentID
     * @param currentTermLevel
     * @param userName
     * @param userRole
     * @return
     */
    public String saveIAInfNotes (String noteName, String content, String currentDictContentID, String currentTermLevel, String userName, String userRole) {
        /*
        PROCEDURE load_notes_IA
                 (pContent_Id        IN tms.tms_predict_contents.predict_content_id%TYPE,
                  pmq_level          IN tms.tms_def_levels.name%TYPE,
                  pnote_nm           IN tms.tms_def_details.short_name%TYPE, --SMQDESC SMQALG
                  pnote_type         IN tms.tms_def_dict_info_dets.info_note_type%TYPE,
                  pnote_val          IN tms.tms_dict_info_clobs.def_detail_value%TYPE,
                  pUserRole          IN VARCHAR2,
                  pUserName          IN nmq_track_state.created_user%TYPE)
        */
        logger.info("SAVING IA NOTE: " + noteName);

        String sql = "{call nmat_ui_pkg.load_notes_IA (?,?,?,?,?,?,?)}";
        DBTransaction dBTransaction = getDBTransaction();
        OracleCallableStatement cstmt = (OracleCallableStatement) dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT);
        //CallableStatement cstmt = new CallableStatement (dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT), "nmat_ui_pkg.load_notes_IA");
        try {
            cstmt.setString("pContent_Id", currentDictContentID);
            cstmt.setString("pmq_level", currentTermLevel);
            cstmt.setString("pnote_nm", noteName);
            cstmt.setString("pnote_type", "C");
            cstmt.setString("pnote_val", content);
            cstmt.setString("pUserRole", userRole);
            cstmt.setString("pUserName", userName);
            cstmt.executeUpdate();
            cstmt.close();
            return ModelConstants.SUCCESS;
        } catch (SQLException e) {
           // String messageText = "An error occurred.  " + noteName + " was not " + action + " successfully.";
//            FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, messageText, "");
//            FacesContext.getCurrentInstance().addMessage(null, msg);
//            e.printStackTrace();
            logger.error("Exception in saveIAInfNotes...", e); 
            return ModelConstants.FAILURE;
        } finally {
            if (null != cstmt){
                try {
                    cstmt.close();
                } catch (SQLException sqe){
                    logger.error("error while closing callable statment...");     
                }
            }
        }
    }

    /**
     * @param groupName
     * @return
     */
    public String activateGroup (String groupName)   {
       /*
         PROCEDURE nmat_ui_pkg.nmat_activation_chkmode
            (pGrpName IN tms.tms_predict_groups.Name%TYPE)
        */
//           String messageText;
//           FacesMessage msg;
       String sql = "{call nmat_ui_pkg.nmat_transid_activation (?)}";
       DBTransaction dBTransaction = getDBTransaction();
       OracleCallableStatement cstmt = (OracleCallableStatement) dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT);
       //CallableStatement cstmt = new CallableStatement (dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT), "nmat_ui_pkg.nmat_transid_activation");
       try {
            cstmt.setString(1, groupName);
            cstmt.executeUpdate();
            cstmt.close();
            return ModelConstants.SUCCESS;
            //msg = new FacesMessage(FacesMessage.SEVERITY_INFO, "Activation group " + groupName + " successfully activated", null);
        } catch (SQLException e) {
            if (e.getMessage().indexOf(ModelConstants.CHECK_MODE_ERRORS) > -1) {  // it's a name already in use error
                return ModelConstants.CHECK_MODE_ERRORS;
                //messageText = "Errors occurred during the pre-activation validation and need to be resolved before " + groupName + " can be activated.";
            } else { // it's something else
               // messageText = "The following error occurred: " +  e.getMessage() ;
               logger.error("Exception in activateGroup...", e);
               return ModelConstants.FAILURE;
                //e.printStackTrace();
            }
        //msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, messageText, "");
        } finally {
            if (null != cstmt){
                try {
                    cstmt.close();
                } catch (SQLException sqe){
                    logger.error("error while closing callable statment...");     
                }
            }
        }
        //FacesContext.getCurrentInstance().addMessage(null, msg);
    }
    /**
     * @param groupName
     * @return
     */
    public String activateGroupInCheckMode (String groupName)   {
        /*
         PROCEDURE nmat_ui_pkg.nmat_transid_activation 
        (pGrpName IN tms.tms_predict_groups.name%TYPE)
        */
       String retVal = "";
//           String messageText;
//           FacesMessage msg;
       String sql = "{call nmat_ui_pkg.nmat_activation_chkmode (?)}";
       DBTransaction dBTransaction = getDBTransaction();
        OracleCallableStatement cstmt = (OracleCallableStatement) dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT);
      // CallableStatement cstmt = new CallableStatement (dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT), "nmat_ui_pkg.nmat_activation_chkmode");
       try {
            cstmt.setString(1, groupName);
            cstmt.executeUpdate();
            cstmt.close();
      //      msg = new FacesMessage(FacesMessage.SEVERITY_INFO, "Activation group " + groupName + " successfully validated in checkmode.", null);
            retVal = ModelConstants.SUCCESS;
        } catch (SQLException e) {
            if (e.getMessage().indexOf(ModelConstants.ACTIVATION_ERRORS) > -1) {
                retVal = ModelConstants.ACTIVATION_ERRORS;
              //  messageText = "The errors found during CHECK mode activation are displayed on the screen. Demote the NMQs in error to Draft to resolve, Promote and Validate again.";
            } else if (e.getMessage().indexOf(ModelConstants.RECORD_LOCKED_ERROR) > -1) {
                retVal = ModelConstants.RECORD_LOCKED_ERROR;
                //messageText = CSMQBean.getProperty("RECORD_LOCKED_ERROR");
            } else { // it's something else
              //  messageText = "The following error occurred: " +  e.getMessage() ;
             //   e.printStackTrace();
                retVal = ModelConstants.FAILURE;
            }
            logger.error("Exception in activateGroupInCheckMode...", e); 
        //msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, messageText, "");
            //retVal = false;
        } finally {
            if (null != cstmt){
                try {
                    cstmt.close();
                } catch (SQLException sqe){
                    logger.error("error while closing callable statment...");     
                }
            }
        }
        //FacesContext.getCurrentInstance().addMessage(null, msg);
        return retVal;
    }

    /**
     * @return
     */
    public String refreshImpactMVs ()   {
       /*
       PROCEDURE impact_pkg.submit_refresh_mviews(
         i_filter_dict_name IN tms_def_dictionaries.short_name%TYPE) 
        */
//           String messageText = "";
//           FacesMessage msg;
        String retVal = "";
       //String sql = "{call impact_pkg.submit_refresh_mviews (?)}";
       //String sql = "DECLARE v_job number; begin dbms_job.submit (job => v_job,next_date => SYSDATE,what => 'BEGIN smq_codelist_pkg.define_globals; ' || 'dbms_mview.refresh(''nmq_smq_impact_contents''); END;',INTERVAL => NULL);exception WHEN others THEN raise; end;";
       String sql = "BEGIN impact_pkg.submit_refresh_mviews; EXCEPTION WHEN OTHERS THEN RAISE; END;";
       DBTransaction dBTransaction = getDBTransaction();
       OracleCallableStatement cstmt = (OracleCallableStatement) dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT);
       //CallableStatement cstmt = new CallableStatement (dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT), "impact_pkg.submit_refresh_mviews");
       logger.info ("*** SUBMITTING JOB TO REFRESH VIEWS ***");
       try {
            //cstmt.setString(1, CSMQBean.defaultFilterDictionaryShortName);
            cstmt.executeUpdate();
            cstmt.close();
            retVal = ModelConstants.SUCCESS;
           // msg = new FacesMessage(FacesMessage.SEVERITY_INFO, "Impacted list refreshed for dictionary: " + CSMQBean.defaultFilterDictionaryShortName + " successfully activated", null);
        } catch (SQLException e) {
            if (e.getMessage().indexOf(ModelConstants.CHECK_MODE_ERRORS) > -1) {  // it's a name already in use error
                retVal = ModelConstants.FAILURE;
                logger.error("Exception in refreshImpactMVs..", e); 
                //messageText = "The following error(s) occurred during the the refresh of the impacted list for dictionary: " + CSMQBean.defaultFilterDictionaryShortName + "\n" + e.getMessage();
            }
        //msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, messageText, "");
        } finally {
            if (null != cstmt){
                try {
                    cstmt.close();
                } catch (SQLException sqe){
                    logger.error("error while closing callable statment...");     
                }
            }
        }
       return retVal;
        //FacesContext.getCurrentInstance().addMessage(null, msg);
    }

    /**
     * @param dictContentID
     * @param dictionaryID
     * @return
     */
    public Hashtable <String, String> getActivationInfo (String dictContentID, String dictionaryID) {
        
       /*
        PROCEDURE nmat_ui_pkg.s_get_Activation_Info_By_MQ (
            pDictionaryName         IN      tms.tms_def_dictionaries.short_name%TYPE,
            pdictContentID          IN      tms.tms_dict_contents.dict_content_id%TYPE,
            pInitialCreationDate    OUT     DATE,
            pInitialCreationBy      OUT     VARCHAR2,
            pLastActivationDate     OUT     DATE,
            pActivationBy           OUT     VARCHAR2 
            )
        */
        
        logger.info("*** GETTING ACTIVATION INFO ***");
        logger.info("pDictionaryId: " + dictionaryID);
        logger.info("pdictContentID: " + dictContentID); 
          
        String sql = "{call NMAT_UI_PKG.s_get_Activation_Info_By_MQ(?,?,?,?,?,?)}";
        DBTransaction dBTransaction = getDBTransaction();
        OracleCallableStatement cstmt = (OracleCallableStatement) dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT);
    //    FacesMessage msg;
    //    CallableStatement cstmt = new CallableStatement (dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT), "NMAT_UI_PKG.s_get_Activation_Info_By_MQ");
    //    String messageText;
        Hashtable <String, String> retVal = new Hashtable<String, String>();  // array to return the new state and message
        
        try {
            cstmt.setString(1, dictionaryID);
            cstmt.setString(2, dictContentID);
    
            cstmt.registerOutParameter(3, oracle.jdbc.OracleTypes.DATE);
            cstmt.registerOutParameter(4, oracle.jdbc.OracleTypes.CHAR);
            cstmt.registerOutParameter(5, oracle.jdbc.OracleTypes.DATE);
            cstmt.registerOutParameter(6, oracle.jdbc.OracleTypes.CHAR);
            
            cstmt.executeUpdate();
            
            String initialCreationDate = cstmt.getString(3) != null ? cstmt.getString(3) : "";
            String initialCreationBy = cstmt.getString(4) != null ? cstmt.getString(4) : "";
            String lastActivationDate = cstmt.getString(5) != null ? cstmt.getString(5) : "";
            String activationBy = cstmt.getString(6) != null ? cstmt.getString(6) : "";
            
            retVal.put("initialCreationDate", initialCreationDate);
            retVal.put("initialCreationBy", initialCreationBy);
            retVal.put("lastActivationDate", lastActivationDate);
            retVal.put("activationBy",activationBy);
            retVal.put("RETURN_CODE", ModelConstants.SUCCESS );
            cstmt.close();
            return retVal;
        } catch (SQLException e) {
                //messageText = "The following error occurred: " +  e.getMessage() ;
            retVal.put("RETURN_CODE", ModelConstants.FAILURE );
            logger.error("Exception in getActivationInfo..", e); 
                //e.printStackTrace();
        } finally {
            if (null != cstmt){
                try {
                    cstmt.close();
                } catch (SQLException sqe){
                    logger.error("error while closing callable statment...");     
                }
            }
        }
        
        //msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, messageText, "");
        //FacesContext.getCurrentInstance().addMessage(null, msg);
        return retVal;
    }
    public String copyAllRelations(String copiedDictContentID, String currentDictContentID, String currentPredictGroups,String userName){
        String retVal = "";
        logger.info(" >>> COPYING RELATIONS");
        logger.info(" copiedDictContentID:" + copiedDictContentID);
        logger.info(" currentDictContentID:" + currentDictContentID);
        logger.info(" currentPredictGroups:" + currentPredictGroups);
        logger.info(" currentUser:" + userName);

        /*
        PROCEDURE copy_all_relations (
          i_old_parent_id IN tms_dict_contents.dict_content_id%TYPE,
          i_new_parent_id IN tms_dict_contents.dict_content_id%TYPE,
          i_dest_group_name IN tms.tms_predict_groups.name%TYPE,
          i_src_group_name  IN tms.tms_predict_groups.name%TYPE := NULL,
          i_as_of_date    IN tms_dict_contents.end_ts%TYPE := SYSDATE);

        */

        String sql = "{call dict_pkg.copy_all_relations(?,?,?,?,?)}";
        DBTransaction dBTransaction = getDBTransaction();
        CallableStatement cstmt = dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT);

        try {
            cstmt.setInt(1, Integer.parseInt(copiedDictContentID));
            cstmt.setInt(2, Integer.parseInt(currentDictContentID));
            cstmt.setString(3, currentPredictGroups);
            cstmt.setString(4, currentPredictGroups);
            cstmt.setString(5, userName);
            cstmt.executeUpdate();
            retVal = ModelConstants.SUCCESS;
            cstmt.close();
        } catch (SQLException e) {
            //e.printStackTrace();
            retVal = ModelConstants.FAILURE;
            logger.error("Exception in copyAllRelations...");
        } finally {
            if (null != cstmt){
                try {
                    cstmt.close();
                } catch (SQLException sqe){
                    logger.error("error while closing callable statment...");     
                }
            }
        }
        return retVal;
    }
    public HashMap processUpdateRelations (String dictContentID, String predictGroupNames, String currentUser, Object [][] relations) {
        
        /*
        hierarchy_pkg.relate_children_to_parent(
            i_dict_id,      <-- num
            i_grp,          <-- string
            i_created_by,   <-- string
            v_objectArray   <-- object array
            o_returnVal     <-- string, output param
         );
        */
        HashMap retVal = new HashMap();
        String sql = "{call hierarchy_pkg.relate_children_to_parent (?,?,?,?,?)}";
        DBTransaction dBTransaction = getDBTransaction();
        CallableStatement cstmt = dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT);        
       // DBTransaction dBTransaction = DMLUtils.getDBTransaction();
        String newDictContentCode = "";
       
        Connection con = null;
           // CallableStatement cstmt = null;
        try {
//            cstmt = dBTransaction.createCallableStatement(sql, DBTransaction.DEFAULT);
            con = cstmt.getConnection();
            ArrayDescriptor descriptor = ArrayDescriptor.createDescriptor( "RELATION_CHILD_ARRAY", con);
            ARRAY array_to_pass = new ARRAY( descriptor, cstmt.getConnection(), relations);

            logger.info(" ** SAVING RELATIONS");
            logger.info(" currentDictContentID: " + dictContentID);
            logger.info(" currentPredictGroups: " + predictGroupNames);
            logger.info(" currentUser: " + currentUser);
            logger.info(" array_to_pass: " + array_to_pass);
        
        
            cstmt.setString(1, dictContentID);
            cstmt.setString(2, predictGroupNames);
            cstmt.setString(3, currentUser);
            cstmt.setArray( 4, array_to_pass);
            cstmt.setString(5, "");
            
            cstmt.registerOutParameter(5, Types.NVARCHAR);
            cstmt.executeUpdate(); 
            newDictContentCode = cstmt.getString(5);  
            con.commit();
            //cstmt.close();
            
            // REMOVE ALL THE PENDING CHANGES - JUST TO BE SAFE
//            inserts.clear();
//            updates.clear();
//            deletes.clear();
            retVal.put("newDictContentCode", newDictContentCode);
            retVal.put("RETURN_CODE", ModelConstants.SUCCESS);
        } catch (SQLException e) {
            logger.error("Exception in processUpdateRelations", e);
            retVal.put("RETURN_CODE", ModelConstants.FAILURE);
            return retVal;
            //            msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, "The following error occurred: " + e.getMessage(), null);
//            FacesContext.getCurrentInstance().addMessage(null, msg);
//            
//            e.printStackTrace();
//                return -1;
        } finally {
            if (null != cstmt){
                try {
                    cstmt.close();
                } catch (SQLException sqe){
                    logger.error("error while closing callable statment...");     
                }
            }
        }    
        return retVal;
    }
}